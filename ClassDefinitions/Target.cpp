/* 
 * Created by Jack Hong on 2018-07-24. (jhong@alumni.ubc.ca)
 */
#pragma once

#include "Target.hpp"
#include "CutsAndWindows.hpp"

namespace CW = CutsAndWindows;

ClassImp(Target);

Target::Target() {
    m_bars.reserve(256);
    for (int k=0; k < 256; k++) {
        point_t p{Xcoords[k], Ycoords[k]};
        TargetBar bar(p);
        m_bars.push_back(bar);
    }
}

Target::Target(DetectorData &data) {
    // ASSUME: data has been time walk corrected and threshold adjusted.
    m_bars.reserve(256);
    for (int m=0; m < 256; m++) {

        int bar_number = m;

        point_t p{Xcoords[m], Ycoords[m]};

        if (!data.isThresholdAdjusted()) {
            data.adjustThreshold();
        }

        if (!data.isTimeWalkCorrected()) {
            data.correctTimeWalk();
        }

        int ADC_HG = data.ADC_High_TARGET[m];
        int ADC_LG = data.ADC_Low_TARGET[m];
        int TDC_LE = -1;
        for (int n=0; n < 6; n++) {
            if(data.TDC_LE_TARGET[m][n] >= CW::TDC_Thr_min && data.TDC_LE_TARGET[m][n] <= CW::TDC_Thr_max) {
                TDC_LE = data.TDC_LE_TARGET[m][n];
            }
        }

        BarType bar_type = empty;  // temporary. reassign after ADC and TDC values are known.
        TargetBar bar(p, bar_number, bar_type, ADC_HG, ADC_LG, TDC_LE);
        m_bars.push_back(bar);
        assignBarTypes();
    }
}

void Target::assignBarTypes() {
    // TODO: Implement assignBarTypes
    for (auto &b : m_bars) {
        b.setBarType(empty);
    }
}

TargetBar Target::getBar(int bar_index) {
    return m_bars[bar_index];
};

vector<TargetBar> Target::getAllBars() {
    return m_bars;
}

vector<TargetBar> Target::getLeptonBars() {
    vector<TargetBar> leptons;
    for (auto b : m_bars) {
        if (b.getBarType() == lepton) {
            leptons.push_back(b);
        }
    }
    return leptons;
}

vector<TargetBar> Target::getKaonBars() {
    vector<TargetBar> kaons;
    for (auto b : m_bars) {
        if (b.getBarType() == kaon) {
            kaons.push_back(b);
        }
    }
    return kaons;
}

void Target::printBar(int bar_number) {
    m_bars[bar_number].printInfo();
}

// X coordinates of TARGET bars
const double Target::Xcoords[256] = {
                                                    - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,
                                    -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,
                            -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,
                    -20.15, -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,  20.15,
            -23.25, -20.15, -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,  20.15,  23.25,
            -23.25, -20.15, -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,  20.15,  23.25,
    -26.35, -23.25, -20.15, -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,  20.15,  23.25,  26.35,
    -26.35, -23.25, -20.15, -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,  20.15,  23.25,  26.35,
    -26.35, -23.25, -20.15, -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,  20.15,  23.25,  26.35,
    -26.35, -23.25, -20.15, -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,  20.15,  23.25,  26.35,
    -26.35, -23.25, -20.15, -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,  20.15,  23.25,  26.35,
    -26.35, -23.25, -20.15, -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,  20.15,  23.25,  26.35,
            -23.25, -20.15, -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,  20.15,  23.25,
            -23.25, -20.15, -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,  20.15,  23.25,
                    -20.15, -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,  20.15,
                            -17.05, -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,  17.05,
                                    -13.95, -10.85, - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75,  10.85,  13.95,
                                                    - 7.75, - 4.65, - 1.55,   1.55,   4.65,   7.75
};

// Y coordinates of TARGET bars
const double Target::Ycoords[256] = {
                                                     26.35,  26.35,  26.35,  26.35,  26.35,  26.35,
                                     23.25,  23.25,  23.25,  23.25,  23.25,  23.25,  23.25,  23.25,  23.25,  23.25,
                             20.15,  20.15,  20.15,  20.15,  20.15,  20.15,  20.15,  20.15,  20.15,  20.15,  20.15,  20.15,
                     17.05,  17.05,  17.05,  17.05,  17.05,  17.05,  17.05,  17.05,  17.05,  17.05,  17.05,  17.05,  17.05,  17.05,
             13.95,  13.95,  13.95,  13.95,  13.95,  13.95,  13.95,  13.95,  13.95,  13.95,  13.95,  13.95,  13.95,  13.95,  13.95,  13.95,
             10.85,  10.85,  10.85,  10.85,  10.85,  10.85,  10.85,  10.85,  10.85,  10.85,  10.85,  10.85,  10.85,  10.85,  10.85,  10.85,
      7.75,   7.75,   7.75,   7.75,   7.75,   7.75,   7.75,   7.75,   7.75,   7.75,   7.75,   7.75,   7.75,   7.75,   7.75,   7.75,   7.75,   7.75,
      4.65,   4.65,   4.65,   4.65,   4.65,   4.65,   4.65,   4.65,   4.65,   4.65,   4.65,   4.65,   4.65,   4.65,   4.65,   4.65,   4.65,   4.65,
      1.55,   1.55,   1.55,   1.55,   1.55,   1.55,   1.55,   1.55,   1.55,   1.55,   1.55,   1.55,   1.55,   1.55,   1.55,   1.55,   1.55,   1.55,
    - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55, - 1.55,
    - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65, - 4.65,
    - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75, - 7.75,
            -10.85, -10.85, -10.85, -10.85, -10.85, -10.85, -10.85, -10.85, -10.85, -10.85, -10.85, -10.85, -10.85, -10.85, -10.85, -10.85,
            -13.95, -13.95, -13.95, -13.95, -13.95, -13.95, -13.95, -13.95, -13.95, -13.95, -13.95, -13.95, -13.95, -13.95, -13.95, -13.95,
                    -17.05, -17.05, -17.05, -17.05, -17.05, -17.05, -17.05, -17.05, -17.05, -17.05, -17.05, -17.05, -17.05, -17.05,
                            -20.15, -20.15, -20.15, -20.15, -20.15, -20.15, -20.15, -20.15, -20.15, -20.15, -20.15, -20.15,
                                    -23.25, -23.25, -23.25, -23.25, -23.25, -23.25, -23.25, -23.25, -23.25, -23.25,
                                                    -26.35, -26.35, -26.35, -26.35, -26.35, -26.35
};

